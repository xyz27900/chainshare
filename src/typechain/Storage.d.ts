/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StorageInterface extends ethers.utils.Interface {
  functions: {
    "getFile(address,string)": FunctionFragment;
    "like(address,string)": FunctionFragment;
    "uploadFile(string,string,string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getFile",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "like",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadFile",
    values: [string, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "getFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uploadFile", data: BytesLike): Result;

  events: {
    "FileUploaded(address,string,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FileUploaded"): EventFragment;
}

export type FileUploadedEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    owner: string;
    ipfsHash: string;
    mime: string;
    name: string;
    uploadedAt: BigNumber;
  }
>;

export class Storage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StorageInterface;

  functions: {
    getFile(
      owner: string,
      uuid: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, number] & {
        ipfsHash: string;
        mime: string;
        name: string;
        uploadedAt: BigNumber;
        likes: number;
      }
    >;

    like(
      owner: string,
      uuid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uploadFile(
      uuid: string,
      ipfsHash: string,
      mime: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getFile(
    owner: string,
    uuid: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, number] & {
      ipfsHash: string;
      mime: string;
      name: string;
      uploadedAt: BigNumber;
      likes: number;
    }
  >;

  like(
    owner: string,
    uuid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uploadFile(
    uuid: string,
    ipfsHash: string,
    mime: string,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getFile(
      owner: string,
      uuid: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, number] & {
        ipfsHash: string;
        mime: string;
        name: string;
        uploadedAt: BigNumber;
        likes: number;
      }
    >;

    like(owner: string, uuid: string, overrides?: CallOverrides): Promise<void>;

    uploadFile(
      uuid: string,
      ipfsHash: string,
      mime: string,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FileUploaded(address,string,string,string,uint256)"(
      owner?: string | null,
      ipfsHash?: null,
      mime?: null,
      name?: null,
      uploadedAt?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        owner: string;
        ipfsHash: string;
        mime: string;
        name: string;
        uploadedAt: BigNumber;
      }
    >;

    FileUploaded(
      owner?: string | null,
      ipfsHash?: null,
      mime?: null,
      name?: null,
      uploadedAt?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        owner: string;
        ipfsHash: string;
        mime: string;
        name: string;
        uploadedAt: BigNumber;
      }
    >;
  };

  estimateGas: {
    getFile(
      owner: string,
      uuid: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    like(
      owner: string,
      uuid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uploadFile(
      uuid: string,
      ipfsHash: string,
      mime: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFile(
      owner: string,
      uuid: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    like(
      owner: string,
      uuid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uploadFile(
      uuid: string,
      ipfsHash: string,
      mime: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
