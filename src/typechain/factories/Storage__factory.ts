/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Storage, StorageInterface } from "../Storage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "ipfsHash",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "mime",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "uploadedAt",
        type: "uint256",
      },
    ],
    name: "FileUploaded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "string",
        name: "uuid",
        type: "string",
      },
    ],
    name: "getFile",
    outputs: [
      {
        internalType: "string",
        name: "ipfsHash",
        type: "string",
      },
      {
        internalType: "string",
        name: "mime",
        type: "string",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "uploadedAt",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "likes",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "string",
        name: "uuid",
        type: "string",
      },
    ],
    name: "like",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "uuid",
        type: "string",
      },
      {
        internalType: "string",
        name: "ipfsHash",
        type: "string",
      },
      {
        internalType: "string",
        name: "mime",
        type: "string",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "uploadFile",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b74806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630125133b14610046578063566c281f14610062578063f0286d4614610096575b600080fd5b610060600480360381019061005b9190610676565b6100b2565b005b61007c60048036038101906100779190610676565b610152565b60405161008d959493929190610886565b60405180910390f35b6100b060048036038101906100ab91906106ca565b610397565b005b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816040516100fe9190610815565b9081526020016040518091039020600401600081819054906101000a900463ffffffff168092919061012f90610a5c565b91906101000a81548163ffffffff021916908363ffffffff160217905550505050565b606080606060008060008060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020876040516101a89190610815565b9081526020016040518091039020905080600001816001018260020183600301548460040160009054906101000a900463ffffffff168480546101ea906109f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610216906109f9565b80156102635780601f1061023857610100808354040283529160200191610263565b820191906000526020600020905b81548152906001019060200180831161024657829003601f168201915b50505050509450838054610276906109f9565b80601f01602080910402602001604051908101604052809291908181526020018280546102a2906109f9565b80156102ef5780601f106102c4576101008083540402835291602001916102ef565b820191906000526020600020905b8154815290600101906020018083116102d257829003601f168201915b50505050509350828054610302906109f9565b80601f016020809104026020016040519081016040528092919081815260200182805461032e906109f9565b801561037b5780601f106103505761010080835404028352916020019161037b565b820191906000526020600020905b81548152906001019060200180831161035e57829003601f168201915b5050505050925095509550955095509550509295509295909350565b602e8351146103a557600080fd5b600082511180156103b857506101008251105b6103c157600080fd5b600081511180156103d457506101008151105b6103dd57600080fd5b600042905060006040518060a00160405280868152602001858152602001848152602001838152602001600063ffffffff168152509050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020876040516104619190610815565b9081526020016040518091039020600082015181600001908051906020019061048b929190610556565b5060208201518160010190805190602001906104a8929190610556565b5060408201518160020190805190602001906104c5929190610556565b506060820151816003015560808201518160040160006101000a81548163ffffffff021916908363ffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff167fa243d39caa4c5fa0efb41b7e3d59dcd1a7f72d5a6bc6c34a9bc20fcae079ead486868686604051610546949392919061082c565b60405180910390a2505050505050565b828054610562906109f9565b90600052602060002090601f01602090048101928261058457600085556105cb565b82601f1061059d57805160ff19168380011785556105cb565b828001600101855582156105cb579182015b828111156105ca5782518255916020019190600101906105af565b5b5090506105d891906105dc565b5090565b5b808211156105f55760008160009055506001016105dd565b5090565b600061060c61060784610913565b6108ee565b90508281526020810184848401111561062457600080fd5b61062f8482856109b7565b509392505050565b60008135905061064681610b27565b92915050565b600082601f83011261065d57600080fd5b813561066d8482602086016105f9565b91505092915050565b6000806040838503121561068957600080fd5b600061069785828601610637565b925050602083013567ffffffffffffffff8111156106b457600080fd5b6106c08582860161064c565b9150509250929050565b600080600080608085870312156106e057600080fd5b600085013567ffffffffffffffff8111156106fa57600080fd5b6107068782880161064c565b945050602085013567ffffffffffffffff81111561072357600080fd5b61072f8782880161064c565b935050604085013567ffffffffffffffff81111561074c57600080fd5b6107588782880161064c565b925050606085013567ffffffffffffffff81111561077557600080fd5b6107818782880161064c565b91505092959194509250565b600061079882610944565b6107a2818561094f565b93506107b28185602086016109c6565b6107bb81610b16565b840191505092915050565b60006107d182610944565b6107db8185610960565b93506107eb8185602086016109c6565b80840191505092915050565b6108008161099d565b82525050565b61080f816109a7565b82525050565b600061082182846107c6565b915081905092915050565b60006080820190508181036000830152610846818761078d565b9050818103602083015261085a818661078d565b9050818103604083015261086e818561078d565b905061087d60608301846107f7565b95945050505050565b600060a08201905081810360008301526108a0818861078d565b905081810360208301526108b4818761078d565b905081810360408301526108c8818661078d565b90506108d760608301856107f7565b6108e46080830184610806565b9695505050505050565b60006108f8610909565b90506109048282610a2b565b919050565b6000604051905090565b600067ffffffffffffffff82111561092e5761092d610ae7565b5b61093782610b16565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006109768261097d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b82818337600083830152505050565b60005b838110156109e45780820151818401526020810190506109c9565b838111156109f3576000848401525b50505050565b60006002820490506001821680610a1157607f821691505b60208210811415610a2557610a24610ab8565b5b50919050565b610a3482610b16565b810181811067ffffffffffffffff82111715610a5357610a52610ae7565b5b80604052505050565b6000610a67826109a7565b915063ffffffff821415610a7e57610a7d610a89565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610b308161096b565b8114610b3b57600080fd5b5056fea264697066735822122093c647efe3c91dcffb4fcf4bc9ff556c6a40098a09630f45f478187727faf0d164736f6c63430008040033";

export class Storage__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Storage> {
    return super.deploy(overrides || {}) as Promise<Storage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Storage {
    return super.attach(address) as Storage;
  }
  connect(signer: Signer): Storage__factory {
    return super.connect(signer) as Storage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageInterface {
    return new utils.Interface(_abi) as StorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Storage {
    return new Contract(address, _abi, signerOrProvider) as Storage;
  }
}
